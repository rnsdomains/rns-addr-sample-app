{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["props","state","domain","getting","addr","error","handleDomainChange","bind","getAddress","event","this","setState","target","value","web3","Web3","RNS","then","catch","type","onChange","onClick","message","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"0aAKE,WAAYA,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,OAAQ,GACRC,SAAS,EACTC,KAAM,KACRC,MAAO,MAGP,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAXD,E,+DAcAE,GACjBC,KAAKC,SAAS,CAAET,OAAQO,EAAMG,OAAOC,MAAOT,KAAM,KAAMC,MAAO,S,mCAGnD,IAAD,OACHH,EAAWQ,KAAKT,MAAhBC,OAERQ,KAAKC,SAAS,CAAER,SAAS,EAAMC,KAAM,KAAMC,MAAO,OAElD,IAAMS,EAAO,IAAIC,IAAK,8BACV,IAAIC,IAAIF,GAEhBV,KAAKF,GACRe,MAAK,SAAAb,GAAI,OAAI,EAAKO,SAAS,CAAEP,OAAMD,SAAS,OAC5Ce,OAAM,SAAAb,GAAK,OAAI,EAAKM,SAAS,CAAEN,QAAOF,SAAS,S,+BAGxC,IAAD,EACkCO,KAAKT,MAAtCC,EADD,EACCA,OAAQC,EADT,EACSA,QAASC,EADlB,EACkBA,KAAMC,EADxB,EACwBA,MAE/B,OACE,6BACE,2BAAOc,KAAK,OAAOC,SAAUV,KAAKJ,mBAAoBO,MAAOX,IAC7D,4BAAQmB,QAASX,KAAKF,YAAtB,eACCL,GAAW,MACXC,GAAQ,+BAAQA,GAChBC,GAAS,yCAAeA,EAAMiB,QAArB,mBAA8CjB,EAAMkB,W,GAzCzCC,aCQTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAb,GACLmC,QAAQnC,MAAMA,EAAMiB,c","file":"static/js/main.ee134b84.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport RNS from '@rsksmart/rns';\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      domain: '',\n      getting: false,\n      addr: null,\n    error: null,\n    };\n\n    this.handleDomainChange = this.handleDomainChange.bind(this);\n    this.getAddress = this.getAddress.bind(this);\n  }\n\n  handleDomainChange(event) {\n    this.setState({ domain: event.target.value, addr: null, error: null });\n  }\n\n  getAddress() {\n    const { domain } = this.state;\n\n    this.setState({ getting: true, addr: null, error: null  });\n\n    const web3 = new Web3('https://public-node.rsk.co')\n    const rns = new RNS(web3);\n\n    rns.addr(domain)\n    .then(addr => this.setState({ addr, getting: false }))\n    .catch(error => this.setState({ error, getting: false }));\n  }\n\n  render() {\n    const { domain, getting, addr, error } = this.state;\n\n    return (\n      <div>\n        <input type=\"text\" onChange={this.handleDomainChange} value={domain} />\n        <button onClick={this.getAddress}>get address</button>\n        {getting && '...'}\n        {addr && <label>{addr}</label>}\n        {error && <label>Error: {error.message} - Read more on {error.ref}</label>}\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}